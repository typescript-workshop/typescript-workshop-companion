"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[907],{4993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"atelier/construire-le-contexte","title":"Exercice 2","description":"Que serait une requ\xeate SQL sans database associ\xe9e et comment les repr\xe9senter en TypeScript ?","source":"@site/docs/atelier/2-construire-le-contexte.md","sourceDirName":"atelier","slug":"/atelier/construire-le-contexte","permalink":"/typescript-workshop-companion/docs/atelier/construire-le-contexte","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/atelier/2-construire-le-contexte.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Exercice 1","permalink":"/typescript-workshop-companion/docs/atelier/opaque"},"next":{"title":"Exercice 3","permalink":"/typescript-workshop-companion/docs/atelier/selectionner-une-table"}}');var r=t(4848),i=t(8453);const o={sidebar_position:2},c="Exercice 2",a={},d=[{value:"Indice 1",id:"indice-1",level:2},{value:"Indice 2",id:"indice-2",level:2},{value:"Solutions",id:"solutions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"exercice-2",children:"Exercice 2"})}),"\n",(0,r.jsx)(n.p,{children:"Que serait une requ\xeate SQL sans database associ\xe9e et comment les repr\xe9senter en TypeScript ?"}),"\n",(0,r.jsx)(n.p,{children:"Nous allons cr\xe9er un contexte qui sera propag\xe9 aux diff\xe9rentes fonctions que nous allons cr\xe9er par la suite. Au fur et \xe0 mesure des exercices, nous aurons besoin de l'enrichir, mais pour le moment notre database suffit."}),"\n",(0,r.jsxs)(n.p,{children:["La plupart du temps TypeScript inf\xe8re le type depuis notre code, mais dans cette partie, ",(0,r.jsx)(n.strong,{children:"nous allons forcer du typage"}),".\nAttacher le type de notre base de donn\xe9es au contexte nous permettra de pouvoir le propager et l'inspecter pour les fonctions futures"]}),"\n",(0,r.jsxs)(n.p,{children:["Rendez-vous dans le fichier ",(0,r.jsx)(n.code,{children:"2-context-builder.spec.dt.ts"})," et ",(0,r.jsx)(n.code,{children:"db.ts"})," pour l'impl\xe9mentation."]}),"\n",(0,r.jsx)(n.p,{children:"\xc0 vous de jouer !"}),"\n",(0,r.jsx)(n.admonition,{title:"Ressources",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/generic",children:"Types g\xe9n\xe9riques"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/type-hierarchy",children:"Hi\xe9rarchie des types"})}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"indice-1",children:"Indice 1"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Un type g\xe9n\xe9rique"}),(0,r.jsxs)(n.p,{children:["Pour commencer, on voit dans le test qu'on s'attend \xe0 ce que l'impl\xe9mentation de ",(0,r.jsx)(n.code,{children:"buildContext"})," prenne un type en param\xe8tre, un peu comme dans l'exemple ci-apr\xe8s :"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const buildSomething = <T>() => {\n  // et on construira quelque chose qui d\xe9pend de `T`\n};\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"indice-2",children:"Indice 2"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"C'est Typescript qui a parfois besoin d'un coup de pouce"}),(0,r.jsxs)(n.p,{children:["Dans le cas pr\xe9sent, nous avons des informations que TypeScript n'a pas ",(0,r.jsx)(n.em,{children:"\xe0 priori"})," (le type de notre base de donn\xe9es). Nous pouvons lui apporter plus de pr\xe9cision au lieu de laisser le compilateur tenter d'en inf\xe9rer le type."]}),(0,r.jsxs)(n.p,{children:["On parle alors de ",(0,r.jsx)(n.em,{children:"type assertion"})," ou bien de ",(0,r.jsx)(n.em,{children:"type casting"}),", voire en fran\xe7ais d'",(0,r.jsx)(n.em,{children:"affirmation de type"}),"."]}),(0,r.jsxs)(n.p,{children:["Il existe deux syntaxes pour cela, ",(0,r.jsx)(n.code,{children:"<>"})," et le mot-cl\xe9 ",(0,r.jsx)(n.code,{children:"as"}),". Par exemple, ci-dessous, TypeScript pourrait difficilement connaitre le type d'un \xe9l\xe9ment qu'on extrait du DOM."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Nous savons que l'\xe9l\xe9ment avec l'id 'name' est un input HTML mais Typescript ne pouvant le deviner on peut le lui sp\xe9cifier\nconst nameInput = document.getElementById(\"name\") as HTMLInputElement;\n// ou sinon\nconst nameInput = <HTMLInputElement>document.getElementById(\"name\");\n"})}),(0,r.jsx)(n.p,{children:"Et dans notre cas :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const buildContext = () => {\n  return {\n    $db: undefined, // <= \xe7a pourrait se passer ici...\n  };\n};\n"})}),(0,r.jsxs)(n.p,{children:["Parfois le mot cl\xe9 ",(0,r.jsx)(n.code,{children:"as"})," (en conjonction avec ",(0,r.jsx)(n.code,{children:"any"}),") peut s'av\xe9rer bien utile !\nOn peut ",(0,r.jsx)(n.em,{children:"caster"})," ",(0,r.jsx)(n.code,{children:"undefined"})," directement vers le type de notre base de donn\xe9es afin que TypeScript fasse transiter le type dans notre contexte."]})]}),"\n",(0,r.jsx)(n.h2,{id:"solutions",children:"Solutions"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Avant de d\xe9plier pour afficher la solution, n'h\xe9sitez pas \xe0 nous solliciter ! "}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"\ntype EmptyContext<DB> = {\n  /*\n  * @deprecated type only, do not use at runtime\n  */\n  $db: DB\n}\n\nexport const buildContext = <DB>() => {\n  return {} as EmptyContext<DB>;\n};\n"})}),(0,r.jsx)(n.p,{children:"Autre solution"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"\ntype EmptyContext<DB> = {\n  /*\n  * @deprecated type only, do not use at runtime\n  */\n  $db: DB\n}\n\nexport const buildContext = <DB>() => {\n  return {$db: undefined} as EmptyContext<DB>;\n};\n"})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);