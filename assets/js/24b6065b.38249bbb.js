"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[142],{2182:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/selectFrom_autocomplete-bfabe71661adb4066592ab499d4822c4.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},9864:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"atelier/selectionner-une-table","title":"Exercice 3","description":"\xc7a y est, nous avons cr\xe9\xe9 un contexte qui contient le type de notre database \ud83c\udf89.","source":"@site/docs/atelier/3-selectionner-une-table.md","sourceDirName":"atelier","slug":"/atelier/selectionner-une-table","permalink":"/typescript-workshop-companion/docs/atelier/selectionner-une-table","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/atelier/3-selectionner-une-table.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Exercice 2","permalink":"/typescript-workshop-companion/docs/atelier/construire-le-contexte"},"next":{"title":"Exercice 4","permalink":"/typescript-workshop-companion/docs/atelier/selectionner-des-champs"}}');var r=t(4848),o=t(8453);const i={sidebar_position:3},c="Exercice 3",l={},d=[{value:"Indice 1",id:"indice-1",level:2},{value:"Indice 2",id:"indice-2",level:2},{value:"Indice 3",id:"indice-3",level:2},{value:"Solution",id:"solution",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"exercice-3",children:"Exercice 3"})}),"\n",(0,r.jsx)(n.p,{children:"\xc7a y est, nous avons cr\xe9\xe9 un contexte qui contient le type de notre database \ud83c\udf89."}),"\n",(0,r.jsxs)(n.p,{children:["Maintenant, nous vous proposons \xe0 partir du typage de notre database d'apprendre \xe0 s\xe9lectionner sp\xe9cifiquement une table de celle-ci. Pour cela il nous faudra jongler entre les typages de notre database, des tables et de la m\xe9thode ",(0,r.jsx)(n.code,{children:"selectFrom"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"selectFrom autocomplete",src:t(2182).A+"",width:"942",height:"250"})}),"\n",(0,r.jsxs)(n.p,{children:["Rendez-vous dans le fichier ",(0,r.jsx)(n.code,{children:"3-selectionner-une-table.spec.dt.ts"})," et ",(0,r.jsx)(n.code,{children:"db.ts"})," pour l'impl\xe9mentation."]}),"\n",(0,r.jsx)(n.p,{children:"\xc0 vous de jouer !"}),"\n",(0,r.jsx)(n.admonition,{title:"Ressources",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/generic",children:"Types g\xe9n\xe9riques"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/conditional-types",children:"Types conditionnels"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/keyof-lookup",children:"KeyOf & lookup"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript-workshop-companion/docs/typescript/type-hierarchy",children:"Hi\xe9rarchie des types"})}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"indice-1",children:"Indice 1"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Les cl\xe9s sont rest\xe9es sur la table"}),(0,r.jsxs)(n.p,{children:["Si l'on souhaite b\xe9n\xe9ficier d'autocompl\xe9tion en invoquant ",(0,r.jsx)(n.code,{children:"selectFrom"})," on peut inf\xe9rer les noms des tables disponibles \xe0 partir du type de notre ",(0,r.jsx)(n.code,{children:"Database"})," courante. Et la valeur adoss\xe9e \xe0 la cl\xe9 ",(0,r.jsx)(n.code,{children:"$db"})," du ",(0,r.jsx)(n.em,{children:"contexte"})," est justement de type ",(0,r.jsx)(n.code,{children:"Database"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Database = {\n  users: UserTable;\n  companies: CompanyTable;\n};\n// les noms des tables sont les cl\xe9s du type qui repr\xe9sente notre base de donn\xe9es\n"})}),(0,r.jsxs)(n.p,{children:["On peut acc\xe9der au type de ",(0,r.jsx)(n.code,{children:"$db"})," au moyen d'un ",(0,r.jsx)(n.em,{children:"lookup type"})," via le type de notre ",(0,r.jsx)(n.em,{children:"contexte"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const context = buildContext<Database>();\ntype Context = typeof context;\n//    ^? type Context = { $db: Database }\ntype AccessedType = Context["$db"];\n//    ^? AccessedType = Database\n'})}),(0,r.jsxs)(n.p,{children:["On peut acc\xe9der au type de ",(0,r.jsx)(n.code,{children:"$db"})," au moyen d'un ",(0,r.jsx)(n.em,{children:"lookup type"})," via le type de notre ",(0,r.jsx)(n.em,{children:"contexte"}),"."]})]}),"\n",(0,r.jsx)(n.h2,{id:"indice-2",children:"Indice 2"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"(encore) quelques cl\xe9s pour avancer"}),(0,r.jsxs)(n.p,{children:["Ce qu'on peut imaginer serait d'extraire les noms des tables telles qu'elles existent dans la cl\xe9 ",(0,r.jsx)(n.code,{children:"$db"})," de notre ",(0,r.jsx)(n.em,{children:"contexte"}),"."]}),(0,r.jsxs)(n.p,{children:["Typiquement ici, les noms des tables auxquelles nous pourrions vouloir acc\xe9der sont les cl\xe9s de l'objet en valeur de la cl\xe9 ",(0,r.jsx)(n.code,{children:"$db"}),". Pour extraire les cl\xe9s d'un objet, on dispose de l'op\xe9rateur ",(0,r.jsx)(n.code,{children:"keyof"}),"."]}),(0,r.jsx)(n.p,{children:"Par exemple :"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type ShopDatabase = {\n  products: ProductTable;\n  carts: CartTable;\n};\n\ntype TableNames = keyof ShopDatabase; // "products" | "carts"\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"indice-3",children:"Indice 3"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"L'embarras du choix"}),(0,r.jsxs)(n.p,{children:["On voit que ",(0,r.jsx)(n.code,{children:"selectFrom"})," prend en premier param\xe8tre un contexte initialis\xe9 avec le type d'une base de donn\xe9e. Il pourrait \xeatre utile que la signature de ",(0,r.jsx)(n.code,{children:"selectFrom"})," prenne cela en compte."]}),(0,r.jsxs)(n.p,{children:["De part l'attendu de l'exercice pr\xe9c\xe9dent le type de retour de ",(0,r.jsx)(n.code,{children:"buildContext<DB>()"})," nous est connu :"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type EmptyContext<DB> = {\n  $db: DB;\n};\n"})}),(0,r.jsxs)(n.p,{children:["Mais nous ne connaissons pas \xe0 l'avance ",(0,r.jsx)(n.code,{children:"DB"}),", le type de base de donn\xe9es qui serait ",(0,r.jsx)(n.em,{children:"in fine"})," consomm\xe9 par ",(0,r.jsx)(n.code,{children:"selectFrom"}),"."]}),(0,r.jsxs)(n.p,{children:["C'est un peu contraignant pour d\xe9finir la signature de notre fonction de savoir qu'elle devra prendre en charge ",(0,r.jsx)(n.em,{children:"n'importe quel"})," (any ?) type de base donn\xe9e..."]})]}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Avant de d\xe9plier pour afficher la solution, n'h\xe9sitez pas \xe0 nous solliciter ! "}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type EmptyContext<DB> = {\n  $db: DB;\n};\ntype AnyEmptyContext = EmptyContext<any>;\n\nexport const selectFrom = <\n  Ctx extends AnyEmptyContext,\n  TB extends keyof Ctx["$db"]\n>(\n  ctx: Ctx,\n  tableName: TB\n) => ({\n  ...ctx,\n  _operation: "select" as const,\n  _table: tableName,\n});\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);