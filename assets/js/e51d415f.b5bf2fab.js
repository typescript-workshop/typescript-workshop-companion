"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[386],{633:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>p,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"typescript/types-primitifs","title":"Types primitifs","description":"TypeScript comprend plusieurs types primitifs :","source":"@site/docs/typescript/types-primitifs.md","sourceDirName":"typescript","slug":"/typescript/types-primitifs","permalink":"/typescript-workshop-companion/docs/typescript/types-primitifs","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/typescript/types-primitifs.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Hi\xe9rarchies des types","permalink":"/typescript-workshop-companion/docs/typescript/type-hierarchy"},"next":{"title":"Affirmation de types et types sp\xe9ciaux","permalink":"/typescript-workshop-companion/docs/typescript/types-speciaux-affirmation-de-types"}}');var n=t(4848),r=t(8453);const p={sidebar_position:3},o="Types primitifs",a={},c=[];function l(e){const i={admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"types-primitifs",children:"Types primitifs"})}),"\n",(0,n.jsx)(i.p,{children:"TypeScript comprend plusieurs types primitifs :"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"string, ex : 'Devoxx'"}),"\n",(0,n.jsx)(i.li,{children:"number, ex : 18"}),"\n",(0,n.jsx)(i.li,{children:"boolean, true/false"}),"\n",(0,n.jsx)(i.li,{children:"null"}),"\n",(0,n.jsx)(i.li,{children:"undefined"}),"\n",(0,n.jsx)(i.li,{children:"symbol : repr\xe9sente un identifiant unique. Avec les strings, le symbol peut servir de cl\xe9s de propri\xe9t\xe9 d\u2019objet."}),"\n",(0,n.jsx)(i.li,{children:"bigint : \xe0 utiliser pour les grands nombres dont la taille d\xe9passe maximale d\xe9passe 2^53."}),"\n"]}),"\n",(0,n.jsx)(i.admonition,{title:"La diff\xe9rence entre null et undefined",type:"tip",children:(0,n.jsxs)(i.p,{children:["Le compilateur retournera ",(0,n.jsx)(i.code,{children:"undefined"})," dans le cas o\xf9 une variable est d\xe9clar\xe9e mais non initialis\xe9e.\nSi l'on veut expliciter le fait qu'une variable n'a pas de valeur dans ce cas on utilisera le type ",(0,n.jsx)(i.code,{children:"null"}),"."]})}),"\n",(0,n.jsx)(i.p,{children:'Comment utiliser ces types ? Lorsque que vous souhaitez typer une variable const ou let, il vous suffit de pr\xe9ciser son type apr\xe8s les ":" en suivant la syntaxe ci-dessous :'}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"const workshop : Mon Type = ..."}),"\nou\n",(0,n.jsx)(i.code,{children:"let workshop : Mon Type = ..."})]}),"\n",(0,n.jsx)(i.admonition,{title:"L'inf\xe9rence de type, quand le compilateur le d\xe9duit de lui-m\xeame.",type:"info",children:(0,n.jsx)(i.p,{children:"Typer ses variables est important, pour autant il n'est pas indispensable de typer vos variables. En effet, \xe0 partir de valeur que vous assignez \xe0 votre variable le compilateur TypeScript sera capable d'en d\xe9duire son type. Ce ph\xe9nom\xe8ne de d\xe9duction de type est appel\xe9 inf\xe9rence."})})]})}function d(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>p,x:()=>o});var s=t(6540);const n={},r=s.createContext(n);function p(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:p(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);