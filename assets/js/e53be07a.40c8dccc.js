"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[233],{756:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>p,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"typescript/type-hierarchy","title":"Hi\xe9rarchies des types","description":"On peut se repr\xe9senter le typage comme un arbre, plus on descend dans cet arbre, plus le type sera sp\xe9cifique.","source":"@site/docs/typescript/type-hierarchy.md","sourceDirName":"typescript","slug":"/typescript/type-hierarchy","permalink":"/typescript-workshop-companion/docs/typescript/type-hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/typescript/type-hierarchy.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Les concepts TypeScript","permalink":"/typescript-workshop-companion/docs/category/les-concepts-typescript"},"next":{"title":"Types par r\xe9f\xe9rences : Arrays, Tuples et Objets","permalink":"/typescript-workshop-companion/docs/typescript/types-par-references"}}');var i=t(4848),n=t(8453);const p={sidebar_position:1},o="Hi\xe9rarchies des types",c={},a=[];function u(e){const s={code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"hi\xe9rarchies-des-types",children:"Hi\xe9rarchies des types"})}),"\n",(0,i.jsx)(s.p,{children:"On peut se repr\xe9senter le typage comme un arbre, plus on descend dans cet arbre, plus le type sera sp\xe9cifique."}),"\n",(0,i.jsx)(s.p,{children:"Tout en haut, nous avons :"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"any"})," qui repr\xe9sente n'importe quel type et qui d\xe9sactive toute aide que le compilateur pourrait vous apporter"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"unknowm"})," qui repr\xe9sente n'importe quel type et qui vous forcera \xe0 verifier son type avant de l'utiliser"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"L'\xe9tage du dessous repr\xe9sente l'object vide dont tous les types primitifs sont des descendants."}),"\n",(0,i.jsx)(s.p,{children:"En dessous on retrouve donc tous les types primitifs."}),"\n",(0,i.jsx)(s.p,{children:"Dans le cas de l'objet, plus vous allez lui ajouter d'attributs, plus il sera sp\xe9cifique."}),"\n",(0,i.jsx)(s.p,{children:"En bas, on retrouve les constantes qui sont les versions ultra sp\xe9cifiques des primitives et des objets."}),"\n",(0,i.jsxs)(s.p,{children:["Tout en bas, on a le type ",(0,i.jsx)(s.code,{children:"never"})," qui est utilis\xe9 pour mat\xe9rialiser un type impossible.\nSouvent utilis\xe9 dans la branche par d\xe9faut d'un switch sur lequel vous voulez \xeatre exhaustif, et dans les cas impossibles lors de transformations de types."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Hierarchie des types",src:t(6393).A+"",width:"3040",height:"2708"})})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},6393:(e,s,t)=>{t.d(s,{A:()=>r});const r=t.p+"assets/images/ts_types_hierarchy-a64e1a15cfd9f1e0124863768f82160b.png"},8453:(e,s,t)=>{t.d(s,{R:()=>p,x:()=>o});var r=t(6540);const i={},n=r.createContext(i);function p(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:p(e.components),r.createElement(n.Provider,{value:s},e.children)}}}]);