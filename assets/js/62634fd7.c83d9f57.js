"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[559],{1254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"atelier/gestion-des-alias","title":"Exercice 8","description":"Rendez-vous dans le fichier 8-gestion-des-alias.spec-d.ts et db.ts pour l\'impl\xe9mentation.","source":"@site/docs/atelier/8-gestion-des-alias.md","sourceDirName":"atelier","slug":"/atelier/gestion-des-alias","permalink":"/typescript-workshop-companion/docs/atelier/gestion-des-alias","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/atelier/8-gestion-des-alias.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Exercice 7","permalink":"/typescript-workshop-companion/docs/atelier/supprimer-des-lignes"},"next":{"title":"Exercice 9","permalink":"/typescript-workshop-companion/docs/atelier/ameliorer-dx"}}');var i=n(4848),o=n(8453);const r={sidebar_position:8},l="Exercice 8",a={},c=[{value:"Solution",id:"solution",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"exercice-8",children:"Exercice 8"})}),"\n",(0,i.jsxs)(t.p,{children:["Rendez-vous dans le fichier ",(0,i.jsx)(t.code,{children:"8-gestion-des-alias.spec-d.ts"})," et ",(0,i.jsx)(t.code,{children:"db.ts"})," pour l'impl\xe9mentation."]}),"\n",(0,i.jsx)(t.p,{children:"\xc0 vous de jouer !"}),"\n",(0,i.jsx)(t.admonition,{title:"Ressources",type:"tip",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/generic",children:"Types g\xe9n\xe9riques"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/keyof-lookup",children:"KeyOf & lookup"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/type-hierarchy",children:"Hi\xe9rarchie des types"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/conditional-types",children:"Types conditionnels"})}),"\n"]})}),"\n",(0,i.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Avant de d\xe9plier pour afficher la solution, n'h\xe9sitez pas \xe0 nous solliciter ! "}),(0,i.jsx)(t.p,{children:"Alias sur les tables :"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'type AliasedTabled<TB> = `${TB & string} ${string}`;\n//                              ^? la table  ^? son alias\ntype TableOrAlias<TB> = TB | AliasedTabled<TB>;\n\ntype AnyTable<Ctx extends AnyEmptyContext> = TableOrAlias<keyof Ctx["_db"]>;\n\nexport const selectFrom = <\n  Ctx extends AnyEmptyContext,\n  TB extends AnyTable<Ctx>\n>(\n  ctx: Ctx,\n  tableName: TB\n) => ({\n  ...ctx,\n  _operation: "select" as const,\n  _table: tableName,\n});\n'})}),(0,i.jsx)(t.p,{children:"Alias sur les champs"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'type AliasableField<DB extends AnyDB, TB extends keyof DB> =\n  | keyof DB[TB]\n  | `${keyof DB[TB] & string} as ${string}`;\n\nexport type ExplicitableField<\n  DB extends AnyDB,\n  TB extends keyof DB\n> = TB extends `${infer Table} ${infer Alias}`\n  ? AliasableField<DB, Table> | `${Alias}.${AliasableField<DB, Table> & string}`\n  : //                               ^? On peut utiliser l\'alias de la table (et/ou du champs)\n    | AliasableField<DB, TB>\n      | `${TB & string}.${AliasableField<DB, TB> & string}`;\n\nexport const selectFields = <Ctx extends AnySelectableContext>(\n  ctx: Ctx,\n  fieldNames: ExplicitableField<Ctx["_db"], Ctx["_table"]>[]\n) => ({\n  ...ctx,\n  _fields: fieldNames,\n});\n'})})]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);