"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[350],{5590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"typescript/template-literal","title":"Template Literals","description":"Literal types","source":"@site/docs/typescript/template-literal.md","sourceDirName":"typescript","slug":"/typescript/template-literal","permalink":"/typescript-workshop-companion/docs/typescript/template-literal","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/typescript/template-literal.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Types conditionnels","permalink":"/typescript-workshop-companion/docs/typescript/conditional-types"},"next":{"title":"Autres ressources","permalink":"/typescript-workshop-companion/docs/typescript/others"}}');var r=n(4848),a=n(8453);const i={sidebar_position:11},o="Template Literals",p={},l=[{value:"Literal types",id:"literal-types",level:2},{value:"Templates",id:"templates",level:2},{value:"Inference",id:"inference",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"template-literals",children:"Template Literals"})}),"\n",(0,r.jsx)(t.h2,{id:"literal-types",children:"Literal types"}),"\n",(0,r.jsxs)(t.p,{children:["Les ",(0,r.jsx)(t.em,{children:"types litt\xe9raux"})," permettent de restreindre un type \xe0 une valeur sp\xe9cifique. Par exemple :"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'type French = "french";\n'})}),"\n",(0,r.jsx)(t.h2,{id:"templates",children:"Templates"}),"\n",(0,r.jsxs)(t.p,{children:["Il est \xe9galement possible de d\xe9finir des ",(0,r.jsx)(t.em,{children:"gabarits"})," de types litt\xe9raux."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type ContactLanguageInfo = `This user speaks ${string}.`; // <= this is a 'template' literal type\n\nconst displayContactLanguageInfo = (\n  contactLanguage: string\n): ContactLanguageInfo => {\n  return `This user speaks ${contactLanguage}.`;\n};\n"})}),"\n",(0,r.jsx)(t.p,{children:"Quand une union est employ\xe9e dans une section interpol\xe9e, le type r\xe9sultant est l'ensemble des combinaisons d\xe9coulant de chaque membre de l'union :"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'type English = "english";\ntype French = "french";\n\ntype ContactLanguageInfo = `This user speaks ${French | English}.`;\n//          ^? type ContactLanguageInfo = "This user speaks french." | "This user speaks english."\n'})}),"\n",(0,r.jsx)(t.h2,{id:"inference",children:"Inference"}),"\n",(0,r.jsx)(t.p,{children:"Il est possible d'inf\xe9rer un type \xe0 partir d'un template par substitution."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'type FrenchSpeakingCountryCode<Locale> = Locale extends `fr_${infer Country}`\n  ? Country\n  : never;\n\ntype FranceCountryCode = FrenchSpeakingCountryCode<"fr_FR">;\n//        ^? type FranceCountryCode = "FR"\ntype CanadaCountryCode = FrenchSpeakingCountryCode<"fr_CA">;\n//        ^? type CanadaCountryCode = "CA"\ntype BelgiumCountryCode = FrenchSpeakingCountryCode<"fr_BE">;\n//        ^? type BelgiumCountryCode = "BE"\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);