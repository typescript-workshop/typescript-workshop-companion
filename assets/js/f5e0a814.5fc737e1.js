"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[479],{4016:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>p,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"typescript/types-speciaux-affirmation-de-types","title":"Affirmation de types et types sp\xe9ciaux","description":"Affirmation de type","source":"@site/docs/typescript/types-speciaux-affirmation-de-types.md","sourceDirName":"typescript","slug":"/typescript/types-speciaux-affirmation-de-types","permalink":"/typescript-workshop-companion/docs/typescript/types-speciaux-affirmation-de-types","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/typescript/types-speciaux-affirmation-de-types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Types primitifs","permalink":"/typescript-workshop-companion/docs/typescript/types-primitifs"},"next":{"title":"Types par r\xe9f\xe9rences : Arrays, Tuples et Objets","permalink":"/typescript-workshop-companion/docs/typescript/types-par-references"}}');var r=s(4848),n=s(8453);const p={sidebar_position:4},o="Affirmation de types et types sp\xe9ciaux",a={},c=[{value:"Affirmation de type",id:"affirmation-de-type",level:3},{value:"les types sp\xe9ciaux",id:"les-types-sp\xe9ciaux",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"affirmation-de-types-et-types-sp\xe9ciaux",children:"Affirmation de types et types sp\xe9ciaux"})}),"\n",(0,r.jsx)(t.h3,{id:"affirmation-de-type",children:"Affirmation de type"}),"\n",(0,r.jsxs)(t.p,{children:["L'affirmation de type est aussi appel\xe9e ",(0,r.jsx)(t.code,{children:"assertion de type"}),". Il s'agit d'indiquer au compilateur que l'on assigne le type choisit \xe0 notre variable."]}),"\n",(0,r.jsx)(t.p,{children:"Il existe deux syntaxes possibles :"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"variable as type"})," qui utilise l'op\xe9rateur ",(0,r.jsx)(t.code,{children:"as"}),", rendez-vous dans la section ",(0,r.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/mapped-types",children:"Mapped types"})," pour en savoir plus."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"<type>variable"}),", cette syntaxe utilise les types g\xe9n\xe9riques \xe0 d\xe9couvrir ici, ",(0,r.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/generic",children:"les Types g\xe9n\xe9riques"})]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"les-types-sp\xe9ciaux",children:"les types sp\xe9ciaux"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"any"})," qui repr\xe9sente n'importe quel type et qui d\xe9sactive toute aide que le compilateur pourrait vous apporter: autocompl\xe9tion et erreur. Autrement dit, vous indiquez au complateur de ne pas analyser votre variable."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"unknown"})," qui repr\xe9sente n'importe quel type et qui vous forcera \xe0 verifier son type avant de l'utiliser."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"never"})," qui est utilis\xe9 pour mat\xe9rialiser un type impossible."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"void"})," peut recevoir que les valeur ",(0,r.jsx)(t.code,{children:"null"})," ou ",(0,r.jsx)(t.code,{children:"undefined"}),", principalement utilis\xe9 pour typer les retours de fonction."]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{title:"Les relations entre les types",type:"tip",children:(0,r.jsxs)(t.p,{children:["Curieux, curieuse, d'en savoir plus sur comment int\xe9ragissent les types entre eux rendez-vous dans la section ",(0,r.jsx)(t.a,{href:"/typescript-workshop-companion/docs/typescript/type-hierarchy",children:"hi\xe9rarchie des types"})]})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>p,x:()=>o});var i=s(6540);const r={},n=i.createContext(r);function p(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:p(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);