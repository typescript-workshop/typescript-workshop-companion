"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[582],{5196:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/image-1-2e696d38a4c927e4ba254b0daae5103f.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6540);const s={},p=i.createContext(s);function r(e){const t=i.useContext(p);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(p.Provider,{value:t},e.children)}},9690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"typescript/mapped-types","title":"Mapped Types ou Types mapp\xe9s","description":"Comment cela fonctionne ?","source":"@site/docs/typescript/mapped-types.md","sourceDirName":"typescript","slug":"/typescript/mapped-types","permalink":"/typescript-workshop-companion/docs/typescript/mapped-types","draft":false,"unlisted":false,"editUrl":"https://github.com/typescript-workshop/typescript-workshop-companion/tree/main/packages/create-docusaurus/templates/shared/docs/typescript/mapped-types.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Types g\xe9n\xe9riques","permalink":"/typescript-workshop-companion/docs/typescript/generic"},"next":{"title":"Types conditionnels","permalink":"/typescript-workshop-companion/docs/typescript/conditional-types"}}');var s=n(4848),p=n(8453);const r={sidebar_position:9},o="Mapped Types ou Types mapp\xe9s",a={},d=[{value:"Comment cela fonctionne ?",id:"comment-cela-fonctionne-",level:3},{value:"Pourquoi aurions-nous besoin de mapped type ?",id:"pourquoi-aurions-nous-besoin-de-mapped-type-",level:3},{value:"Les mapped types pr\xeats \xe0 l&#39;emploi disponible dans lib.d.ts",id:"les-mapped-types-pr\xeats-\xe0-lemploi-disponible-dans-libdts",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Pour aller plus loin",id:"pour-aller-plus-loin",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,p.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"mapped-types-ou-types-mapp\xe9s",children:"Mapped Types ou Types mapp\xe9s"})}),"\n",(0,s.jsx)(t.h3,{id:"comment-cela-fonctionne-",children:"Comment cela fonctionne ?"}),"\n",(0,s.jsx)(t.p,{children:"Un mapped type est un Type qui prend en param\xe8tre un type g\xe9n\xe9rique de type objet et qui va permettre de cr\xe9er un nouveau type \xe0 partir ce dernier. Pour cela il va it\xe9rer sur les propri\xe8t\xe9s du type pass\xe9 en param\xe8tre et \xe0 l'aide d'un op\xe9rateur va modifier, filtrer les propri\xe9t\xe9s afin d'aboutir au nouveau type."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Sch\xe9ma fonctionnement Mapped types",src:n(5196).A+"",width:"1332",height:"436"})}),"\n",(0,s.jsx)(t.p,{children:"B\xe9n\xe9fices :"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Lisibilit\xe9 du typage"}),"\n",(0,s.jsx)(t.li,{children:"Outil pour cr\xe9er/ modifier facilement des types"}),"\n",(0,s.jsx)(t.li,{children:"Limite les redondances"}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Remarque : les mapped types ne sont d'aucune utilit\xe9 sur les types primitifs puisqu'ils viennent manipuler uniquement les propri\xe9t\xe9s du type objet ",(0,s.jsx)(t.code,{children:"T"})," qui est pass\xe9 en param\xe8tre."]})}),"\n",(0,s.jsx)(t.h3,{id:"pourquoi-aurions-nous-besoin-de-mapped-type-",children:"Pourquoi aurions-nous besoin de mapped type ?"}),"\n",(0,s.jsx)(t.p,{children:"Il arrive que nous ayons besoin de cr\xe9er un type \xe0 partir d'un type existant. Par exemple si vous voulez cr\xe9er un type dont toutes les propri\xe9t\xe9s seraient \"required/requises\" \xe0 partir d'un type de r\xe9f\xe9rence dont certaines de ses propri\xe9t\xe9s qui sont optionnelles, tout en conservant le lien entre les deux, comment feriez-vous ?"}),"\n",(0,s.jsx)(t.p,{children:"Vous pourriez faire le choix d'\xe9crire un nouveau type ind\xe9pendant du premier, mais dans ce cas vous devrez compter sur votre vigilance pour mettre \xe0 jour les deux types, et vous perdrez en s\xe9curit\xe9."}),"\n",(0,s.jsxs)(t.p,{children:["Nous pourrions faire le choix de ne pas utiliser de mapped type et de l'impl\xe9menter ",(0,s.jsx)(t.em,{children:"a la mano"})," mais dans ce cas afin de conserver l'immutabilit\xe9 du type pass\xe9 en param\xe8tre et du nouveau type, cela demanderait plus de code : une interface et une fonction qui serait charg\xe9e de modifier le type."]}),"\n",(0,s.jsx)(t.h3,{id:"les-mapped-types-pr\xeats-\xe0-lemploi-disponible-dans-libdts",children:"Les mapped types pr\xeats \xe0 l'emploi disponible dans lib.d.ts"}),"\n",(0,s.jsx)(t.p,{children:"Si vous parcourez la documentation de TypeScript et notamment le fichier lib.d.ts vous trouverez une s\xe9rie de mapped type qui sont d\xe9j\xe0 d\xe9fini et que vous pouvez utiliser en fonction de votre contexte."}),"\n",(0,s.jsxs)(t.p,{children:["Par exemple : ",(0,s.jsx)(t.code,{children:"Readonly<T>, Required<T>, Partial<T>, Capitalize<T>"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"Des librairies viennent proposer d'autres exemple comme Ts-essential"})}),"\n",(0,s.jsx)(t.h3,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html",children:"Mapped types dans la documetation TypeScript"}),"\n",(0,s.jsx)(t.a,{href:"https://www.totaltypescript.com/concepts/mapped-type",children:"Total TypeScript - Mapped types"})]}),"\n",(0,s.jsx)(t.h3,{id:"pour-aller-plus-loin",children:"Pour aller plus loin"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Re-mappage des cl\xe9s avec ",(0,s.jsx)(t.code,{children:"as"}),"\nLe mot-cl\xe9 ",(0,s.jsx)(t.em,{children:"as"})," permet de filtrer et/ou modifier de nouvelles cl\xe9s \xe0 partir des cl\xe9s qui sont pass\xe9es en entr\xe9e d'un mapped type. Cela peut \xeatre utile si vous souhaitez it\xe9rer sur un type qui serait l'union de deux objets."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Les pr\xe9fix - ou +\nPar d\xe9faut le + est implicite, c'est la raison pour laquelle vous ne le verrez jamais \xe9crit. En revanche le pr\xe9fix - vous permet de retirer ce qui suit, dans la documentation TypeScript vous trouverez -? qui permet ainsi de retirer le caract\xe8re optionnel d'une propri\xe9t\xe9."}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,p.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);